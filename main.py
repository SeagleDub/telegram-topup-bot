import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.fsm import FSMContext, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from aiogram.utils import markdown

API_TOKEN = os.getenv("BOT_TOKEN") or "7829191204:AAFafJxCIapC-0RJwk4N_TKlJxuL19eVk9g"
ADMIN_ID = int(os.getenv("ADMIN_ID") or 582761505)
WEBHOOK_HOST = os.getenv("WEBHOOK_URL") or "https://telegram-topup-bot-1lzl.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 10000))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

dp.middleware.setup(LoggingMiddleware())

menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(
    KeyboardButton("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
    KeyboardButton("üìÇ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
)

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
cancel_kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

class Form(StatesGroup):
    waiting_for_bank = State()
    waiting_for_amount = State()
    waiting_for_type = State()
    choosing_supply_category = State()
    choosing_account_type = State()
    entering_account_quantity = State()
    entering_domain_quantity = State()

last_messages = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

@dp.message_handler(lambda msg: msg.text == "üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def order_topup(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üè¶ AdsCard", callback_data="bank:adscard"),
        InlineKeyboardButton("üí≥ Traffic.cards", callback_data="bank:trafficcards")
    )
    m1 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    m2 = await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    last_messages[message.from_user.id] = [m1.message_id, m2.message_id]
    await Form.waiting_for_bank.set()

@dp.callback_query_handler(lambda c: c.data.startswith("bank:"), state=Form.waiting_for_bank)
async def bank_selected(query: types.CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, bank = query.data.split(":")
    await state.update_data(bank=bank)
    msg = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=cancel_kb)
    last_messages[query.from_user.id] = [msg.message_id]
    await Form.waiting_for_amount.set()
    await query.answer()

@dp.message_handler(state=Form.waiting_for_amount)
async def get_amount(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return

    amount = message.text.strip()
    if not amount.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    await delete_last_messages(message.from_user.id, message)
    await state.update_data(amount=amount)

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ö° –°—Ä–æ—á–Ω–æ–µ", callback_data="type:urgent"),
        InlineKeyboardButton("üïò –ù–µ —Å—Ä–æ—á–Ω–æ–µ (–¥–æ 21:00)", callback_data="type:normal")
    )
    m1 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb)
    m2 = await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    last_messages[message.from_user.id] = [m1.message_id, m2.message_id]
    await Form.waiting_for_type.set()

@dp.callback_query_handler(lambda c: c.data.startswith("type:"), state=Form.waiting_for_type)
async def type_selected(query: types.CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, topup_type = query.data.split(":")
    await state.update_data(topup_type=topup_type)
    await query.answer()

    user_id = query.from_user.id
    username = query.from_user.username or "–Ω–µ—Ç username"
    data = await state.get_data()

    bank = data.get("bank", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    amount = data.get("amount", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    topup_type_text = "‚ö° –°—Ä–æ—á–Ω–æ–µ" if topup_type == "urgent" else "üïò –ù–µ —Å—Ä–æ—á–Ω–æ–µ (–¥–æ 21:00)"

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")
    )

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} (ID: {user_id})\n"
        f"üè¶ –ë–∞–Ω–∫: {bank}\n"
        f"üí≥ –°—É–º–º–∞: {amount}\n"
        f"üìå –¢–∏–ø: {topup_type_text}",
        reply_markup=kb
    )
    await query.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=menu_kb)
    await state.finish()

# === –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ ===

@dp.message_handler(lambda msg: msg.text == "üìÇ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
async def request_supplies(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="supply:accounts"),
        InlineKeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã", callback_data="supply:domains")
    )
    m1 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    m2 = await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    last_messages[message.from_user.id] = [m1.message_id, m2.message_id]
    await Form.choosing_supply_category.set()

@dp.callback_query_handler(lambda c: c.data.startswith("supply:"), state=Form.choosing_supply_category)
async def supply_category_selected(query: types.CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, category = query.data.split(":")
    await query.answer()
    if category == "accounts":
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("üë§ –°–µ—Ç–∞–ø –ö–ò–ù–ì+\n10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤", callback_data="acc:set1"),
            InlineKeyboardButton("üë§ –ö–ò–ù–ì + 1-3 –ë–ú", callback_data="acc:set2"),
            InlineKeyboardButton("üë§ –ê–≤—Ç–æ—Ä–µ–≥–∏", callback_data="acc:set3")
        )
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å):", reply_markup=kb)
        await Form.choosing_account_type.set()
    else:
        msg = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤:", reply_markup=cancel_kb)
        last_messages[query.from_user.id] = [msg.message_id]
        await Form.entering_domain_quantity.set()

@dp.callback_query_handler(lambda c: c.data.startswith("acc:"), state=Form.choosing_account_type)
async def account_type_chosen(query: types.CallbackQuery, state: FSMContext):
    _, acc_type = query.data.split(":")
    await state.update_data(account_type=acc_type)
    msg = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", reply_markup=cancel_kb)
    last_messages[query.from_user.id] = [msg.message_id]
    await Form.entering_account_quantity.set()
    await query.answer()

@dp.message_handler(state=Form.entering_account_quantity)
async def handle_account_quantity(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return

    quantity = message.text.strip()
    if not quantity.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await delete_last_messages(message.from_user.id, message)
    data = await state.get_data()
    acc_type = {
        "set1": "üë§ –°–µ—Ç–∞–ø –ö–ò–ù–ì+10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤",
        "set2": "üë§ –ö–ò–ù–ì + 1-3 –ë–ú",
        "set3": "üë§ –ê–≤—Ç–æ—Ä–µ–≥–∏"
    }.get(data.get("account_type"), "üë§ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")
    )

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ó–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç @{username} (ID: {user_id})\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {acc_type}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        reply_markup=kb
    )

    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=menu_kb)
    await state.finish()

@dp.message_handler(state=Form.entering_domain_quantity)
async def handle_domain_quantity(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return

    quantity = message.text.strip()
    if not quantity.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await delete_last_messages(message.from_user.id, message)
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")
    )

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ó–∞–ø—Ä–æ—Å –¥–æ–º–µ–Ω–æ–≤ –æ—Ç @{username} (ID: {user_id})\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        reply_markup=kb
    )

    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=menu_kb)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("approve") or c.data.startswith("decline"))
async def process_callback(query: types.CallbackQuery):
    action, user_id = query.data.split(":")
    user_id = int(user_id)

    if action == "approve":
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    elif action == "decline":
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    await query.message.edit_reply_markup(reply_markup=None)
    await query.answer()

@dp.message_handler(lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∞", state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    await delete_last_messages(message.from_user.id, message)
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è", reply_markup=menu_kb)

async def delete_last_messages(user_id, current_message):
    ids = last_messages.get(user_id, [])
    for msg_id in ids:
        try:
            await current_message.bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception:
            pass
    last_messages[user_id] = []

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    print("üßπ Webhook —É–¥–∞–ª—ë–Ω –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

