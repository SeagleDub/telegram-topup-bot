import os
import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

router = Router()
dp.include_router(router)

def get_menu_kb(user_id: int) -> ReplyKeyboardMarkup | None:
    if user_id == ADMIN_ID:
        return None
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìÇ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")]
    ])

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
])

class Form(StatesGroup):
    waiting_for_bank = State()
    waiting_for_amount = State()
    waiting_for_type = State()
    choosing_supply_category = State()
    choosing_account_type = State()
    entering_account_quantity = State()
    entering_domain_quantity = State()

last_messages = {}

@router.message(Command("start"))
async def send_welcome(message: Message):
    keyboard = get_menu_kb(message.from_user.id)
    if keyboard:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!")

@router.message(F.text == "üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def order_topup(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè¶ AdsCard", callback_data="bank:adscard"),
         InlineKeyboardButton(text="üí≥ Traffic.cards", callback_data="bank:trafficcards")]
    ])
    m1 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    m2 = await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    last_messages[message.from_user.id] = [m1.message_id, m2.message_id]
    await state.set_state(Form.waiting_for_bank)

@router.callback_query(F.data.startswith("bank:"), Form.waiting_for_bank)
async def bank_selected(query: CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, bank = query.data.split(":")
    await state.update_data(bank=bank)
    msg = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=cancel_kb)
    last_messages[query.from_user.id] = [msg.message_id]
    await state.set_state(Form.waiting_for_amount)
    await query.answer()

@router.message(Form.waiting_for_amount)
async def get_amount(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    amount = message.text.strip()
    if not amount.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    await delete_last_messages(message.from_user.id, message)
    await state.update_data(amount=amount)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö° –°—Ä–æ—á–Ω–æ–µ", callback_data="type:urgent"),
         InlineKeyboardButton(text="üïò –ù–µ —Å—Ä–æ—á–Ω–æ–µ (–¥–æ 21:00)", callback_data="type:normal")]
    ])
    m1 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb)
    m2 = await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    last_messages[message.from_user.id] = [m1.message_id, m2.message_id]
    await state.set_state(Form.waiting_for_type)

@router.callback_query(F.data.startswith("type:"), Form.waiting_for_type)
async def type_selected(query: CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, topup_type = query.data.split(":")
    await state.update_data(topup_type=topup_type)

    user_id = query.from_user.id
    username = query.from_user.username or "–Ω–µ—Ç username"
    data = await state.get_data()

    bank = data.get("bank", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    amount = data.get("amount", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    topup_type_text = "‚ö° –°—Ä–æ—á–Ω–æ–µ" if topup_type == "urgent" else "üïò –ù–µ —Å—Ä–æ—á–Ω–æ–µ (–¥–æ 21:00)"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")]
    ])

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} (ID: {user_id})\n"
        f"üè¶ –ë–∞–Ω–∫: {bank}\n"
        f"üí≥ –°—É–º–º–∞: {amount}\n"
        f"üìå –¢–∏–ø: {topup_type_text}",
        reply_markup=kb
    )
    await query.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_menu_kb(user_id))
    await state.clear()
    await query.answer()

@router.message(F.text == "üìÇ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏")
async def request_supplies(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="supply:accounts")],
        [InlineKeyboardButton(text="üåê –î–æ–º–µ–Ω—ã", callback_data="supply:domains")]
    ])
    m1 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤:", reply_markup=kb)
    m2 = await message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
    last_messages[message.from_user.id] = [m1.message_id, m2.message_id]
    await state.set_state(Form.choosing_supply_category)

@router.callback_query(F.data.startswith("supply:"), Form.choosing_supply_category)
async def supply_category_selected(query: CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, category = query.data.split(":")
    await state.update_data(category=category)
    
    if category == "accounts":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –°–µ—Ç–∞–ø –ö–ò–ù–ì+\n10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤", callback_data="acc:set1")],
            [InlineKeyboardButton(text="üë§ –ö–ò–ù–ì + 1-3 –ë–ú", callback_data="acc:set2")],
            [InlineKeyboardButton(text="üë§ –ê–≤—Ç–æ—Ä–µ–≥–∏", callback_data="acc:set3")]
        ])
        m1 = await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å):", reply_markup=kb)
        m2 = await query.message.answer("‚ùå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", reply_markup=cancel_kb)
        last_messages[query.from_user.id] = [m1.message_id, m2.message_id]
        await state.set_state(Form.choosing_account_type)
    elif category == "domains":
        msg = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤:", reply_markup=cancel_kb)
        last_messages[query.from_user.id] = [msg.message_id]
        await state.set_state(Form.entering_domain_quantity)
    
    await query.answer()

@router.callback_query(F.data.startswith("acc:"), Form.choosing_account_type)
async def account_type_chosen(query: CallbackQuery, state: FSMContext):
    await delete_last_messages(query.from_user.id, query.message)
    _, acc_type = query.data.split(":")
    await state.update_data(account_type=acc_type)
    
    msg = await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", reply_markup=cancel_kb)
    last_messages[query.from_user.id] = [msg.message_id]
    await state.set_state(Form.entering_account_quantity)
    await query.answer()

@router.message(Form.entering_account_quantity)
async def get_account_quantity(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    quantity = message.text.strip()
    if not quantity.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    
    await delete_last_messages(message.from_user.id, message)
    await state.update_data(quantity=quantity)
    
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"
    data = await state.get_data()
    
    account_type_text = {
        "set1": "üë§ –°–µ—Ç–∞–ø –ö–ò–ù–ì+10 –∞–≤—Ç–æ—Ä–µ–≥–æ–≤",
        "set2": "üë§ –ö–ò–ù–ì + 1-3 –ë–ú",
        "set3": "üë§ –ê–≤—Ç–æ—Ä–µ–≥–∏"
    }.get(data.get("account_type"), "üë§ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")]
    ])
    
    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –æ—Ç @{username} (ID: {user_id})\n"
        f"üìÅ –¢–∏–ø: –ê–∫–∫–∞—É–Ω—Ç—ã\n"
        f"üîë –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {account_type_text}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        reply_markup=kb
    )
    
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=)
    await state.clear()

@router.message(Form.entering_domain_quantity)
async def get_domain_quantity(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_handler(message, state)
        return
    
    quantity = message.text.strip()
    if not quantity.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    
    await delete_last_messages(message.from_user.id, message)
    await state.update_data(quantity=quantity)
    
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"approve:{user_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"decline:{user_id}")]
    ])
    
    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –æ—Ç @{username} (ID: {user_id})\n"
        f"üìÅ –¢–∏–ø: –î–æ–º–µ–Ω—ã\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        reply_markup=kb
    )
    
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_menu_kb(user_id))
    await state.clear()

@router.callback_query(F.data.startswith("approve:"))
async def approve_request(query: CallbackQuery):
    _, user_id = query.data.split(":")
    user_id = int(user_id)
    
    await bot.send_message(
        user_id,
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await query.message.edit_text(
        f"{query.message.text}\n\n‚úÖ –í–´–ü–û–õ–ù–ï–ù–û"
    )
    await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("decline:"))
async def decline_request(query: CallbackQuery):
    _, user_id = query.data.split(":")
    user_id = int(user_id)
    
    await bot.send_message(
        user_id,
        "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await query.message.edit_text(
        f"{query.message.text}\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û"
    )
    await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await delete_last_messages(message.from_user.id, message)
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è", reply_markup=get_menu_kb(message.from_user.id))

async def delete_last_messages(user_id, current_message):
    ids = last_messages.get(user_id, [])
    for msg_id in ids:
        try:
            await current_message.bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception:
            pass
    last_messages[user_id] = []

async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—à—å polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
